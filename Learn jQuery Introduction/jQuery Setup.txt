# JQUERY SETUP
--------------

* Why jQuery?
-------------
JavaScript is the most widely-used language for adding dynamic behavior to web pages. The JavaScript community contributes to a collection of libraries that extend and ease its use. In 
this course, you will learn about jQuery, a JavaScript library that makes it easy to add dynamic behavior to HTML elements.

Let’s look at an example of how JavaScript is used to add dynamic behavior to a web page (don’t worry about understanding the code).

const login = document.getElementById('login');
const loginMenu = document.getElementById('loginMenu');

login.addEventListener('click', () => {
  if(loginMenu.style.display === 'none'){
    loginMenu.style.display = 'inline';
  } else {
    loginMenu.style.display = 'none';
  }
});

In this example, JavaScript is used to apply behavior to an HTML element with id login. The behavior allows a user to click a LOGIN button that toggles a login form.

The code below accomplishes the same behavior with jQuery.

$('#login').click(() => {
  $('#loginMenu').toggle()
});

In this example, the same toggle functionality is accomplished using just three lines of code.

* Instructions
--------------
Checkpoint 1 Passed
1.
Copy the jQuery code below and paste it into main.js:

$('.login-button').on('click', () => {
  $('.login-form').toggle();
});

Run the code. You can click the LOGIN button see it in action!

main.js
-------
$('.login-button').on('click', () => {
  $('.login-form').toggle();
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* jQuery Methods
----------------
In the last exercise, you used jQuery to cut twelve lines of code down to three.

Let’s use LEGO bricks as an analogy for understanding how jQuery works. With an infinite number of bricks, you could build an entire city — of course, this would take a long time. What if 
you were given pre-made LEGO buildings, LEGO roads, LEGO parks, etc? You could build a city much faster.

The JavaScript language represents an infinite supply of LEGO bricks — the possibilities are endless but time-consuming. The pre-made LEGO structures are like jQuery methods. You can use 
these methods to add dynamic behavior, such as .hide(), .show(), .fadeIn(), .fadeOut() etc., to HTML elements.

The example in the last exercise took twelve lines of JavaScript, but was achieved with only three lines of jQuery’s .click() and .toggle() methods.

* Instructions
--------------
In the next exercise, we’ll show you how to load the jQuery library into your app so that you can make use of these powerful, pre-made methods.

styles.css
----------
* {
  margin: 0;
  padding: 0;
  transition: 0.1s; }

body {
  font-family: 'Roboto Condensed', Helvetica, sans-serif;
  text-align: left;
  font-size: 18px;
  color: #303030; }

.container {
  max-width: 450px;
  margin: 0 auto; }

h3 {
  color: #C3FF00;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.1em; }

h4 {
  text-transform: uppercase; }

.disabled h3 {
  color: #535353;
  cursor: not-allowed; }

.button-active {
  color: #C3FF00;
  background-color: #535353; }

nav {
  background-color: #303030;
  color: #EFEFEF; }
  nav .container {
    display: flex;
    justify-content: space-between;
    align-items: center; }
    nav .container object {
      width: 4.5em;
      padding: 1.2em 0.5em; }
    nav .container .login-button,
    nav .container .menu-button {
      text-transform: uppercase;
      letter-spacing: 0.1em;
      padding: 1em 1.25em;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      cursor: pointer; }

.nav-menu {
  background-color: #535353;
  color: #EFEFEF;
  display: flex;
  justify-content: center; }
  .nav-menu .container {
    padding: 1.5em;
    display: flex; }
    .nav-menu .container ul {
      list-style: none; }
      .nav-menu .container ul li {
        padding: 0.25em 2em; }
        .nav-menu .container ul li:first-child {
          text-transform: uppercase;
          color: #C3FF00;
          letter-spacing: 0.05em; }

.hide {
  display: none; }

.login-form {
  background-color: #535353;
  padding: 1em 0 0;
  color: #EFEFEF;
  display: none; }
  .login-form .container {
    padding: 0 0.5em; }
  .login-form h4 {
    font-weight: 400; }
  .login-form input {
    width: calc(100% - 1em);
    border: none;
    height: 2em;
    margin: 0.5em 0;
    font-size: 1em;
    padding: 0 0.5em; }
  .login-form .sign-in-button {
    background-color: #303030;
    color: #C3FF00;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    text-align: center;
    width: 100%;
    height: 2.5em;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    cursor: pointer; }

.product-card {
  margin: 1em 0; }
  .product-card .dark-sole-original,
  .product-card .sole-air-ii,
  .product-card .tidal-x {
    background-size: 28em 15em;
    background-position: center;
    height: 14em;
    transition: 0.2s; }
  .product-card .sole-air-ii {
    background-image: url("https://content.codecademy.com/courses/jquery/audit/images/sole-air-ii.png"); }
  .product-card .tidal-x {
    background-image: url("https://content.codecademy.com/courses/jquery/audit/images/tidal-x.png"); }
  .product-card .dark-sole-original {
    background-image: url("https://content.codecademy.com/courses/jquery/audit/images/dark-sole-original.png"); }
  .product-card .photo-active {
    background-size: 30.8em 16.5em;
    transition: 0.2s; }
  .product-card .product-details {
    margin-top: -5px;
    background-color: #EFEFEF;
    display: flex;
    justify-content: space-between; }
    .product-card .product-details h4,
    .product-card .product-details p {
      padding: 0.7em 1.25em; }
    .product-card .product-details div {
      display: flex; }
    .product-card .product-details .more-details-button {
      background-color: #535353;
      padding: 0.75em 1.25em;
      cursor: pointer;
      width: 1em;
      transition: 0.1s; }
      .product-card .product-details .more-details-button img {
        position: relative;
        left: 0.1em; }
      .product-card .product-details .more-details-button .rotate {
        transition: 0.1s;
        transform: rotate(90deg); }
  .product-card .shoe-details {
    display: none;
    background-color: #535353;
    color: #EFEFEF; }
    .product-card .shoe-details .active {
      background-color: #C3FF00;
      color: #303030; }
  .product-card .size-chart,
  .product-card p {
    padding: 1em 1.25em; }
    .product-card .size-chart ul,
    .product-card p ul {
      list-style: none;
      display: flex;
      justify-content: space-around;
      margin-top: 1em; }
      .product-card .size-chart ul li,
      .product-card p ul li {
        padding: 0.5em;
        background-color: #303030;
        width: 100%;
        text-align: center;
        margin-right: 2px; }
  .product-card .buy-now-button {
    background-color: #303030;
    text-align: center;
    padding: 0.75em;
    cursor: pointer; }

.shopping-cart {
  background-color: #171717;
  position: fixed;
  bottom: 0;
  z-index: 99;
  width: 100%;
  box-shadow: 2px 0 4px 0 rgba(0, 0, 0, 0.5);
  display: none;
  height: 3.5em; }
  .shopping-cart .container {
    display: flex;
    justify-content: space-between;
    padding: 1em; }
    .shopping-cart .container .cart {
      display: flex; }
      .shopping-cart .container .cart object {
        margin-right: 0.75em; }

footer {
  color: #EFEFEF;
  background-color: #303030;
  margin-top: 2em;
  padding: 2em 0.5em; }
  footer .container {
    display: flex;
    justify-content: space-between; }
    footer .container object {
      width: 4.5em; }

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* jQuery Library
----------------
We are going to use jQuery to add some interactivity to the MOVE Gear site, an online marketplace for athletic apparel.

To use the jQuery library, index.html must load it with the other dependencies. Take a look at the attached diagram to see where various dependencies load in an HTML document.

The document is loaded from top to bottom. So the style dependencies in the <head> will load first, then the structural elements in the <body> will load next. It has become common 
practice to link the main JavaScript file at the bottom of the HTML document because a good deal of the content of the script will require that the dependencies, style sheets and elements 
exist before the browser can run the JavaScript that uses and references those things.

When you add the jQuery library to your project in the next exercise, you will do so on the line before the </body> tag. Because HTML files load from top to bottom, adding the jQuery 
library at the bottom of your project will ensure that it will not affect the HTML (structure) and CSS (style) load times.

* Instructions
--------------
The image to the right displays the structural separation of JavaScript, HTML, and CSS in an HTML file.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Adding jQuery
---------------
To include jQuery, we use a <script> tag as follows:

<script
  src="https://code.jquery.com/jquery-3.2.1.min.js"
  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
  crossorigin="anonymous"></script>

In this example, the jQuery library is loaded from the jQuery content delivery network (CDN). A CDN is a collection of servers that can deliver content.

You must include the <script> tag in the HTML document before you link to a JavaScript file that uses the jQuery library. The integrity and crossorigin properties in the example ensure 
the file is delivered without any third-party manipulation.

We will use jQuery methods in a JavaScript file called main.js, which we will load into index.html using a <script> tag. We need to load the jQuery library before the main.js file. 
Otherwise, the computer will not understand the jQuery used in main.js.

* Instructions
--------------
Checkpoint 1 Passed
1.
Copy and paste the <script> tag from the instructions above.

Navigate to index.html. Paste the copied tag on the line before the HTML loads main.js - found near the end of the HTML document.

We are using the minified version of jQuery from the jQuery CDN.


Hint
Copy the html below:

<script
  src="https://code.jquery.com/jquery-3.2.1.min.js"
  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
  crossorigin="anonymous"></script>

Paste this code on the line before the <script src="js/main.js"></script> element found near the end of the HTML document.

index.html
----------
<!DOCTYPE html>
<html>

<head>
  <title>Sole Shoes</title>
  <link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700' rel='stylesheet'>
  <link href='https://fonts.googleapis.com/css?family=Roboto+Condensed:400,700' rel='stylesheet'>
  <link rel='stylesheet' type='text/css' href='css/styles.css'>
</head>

<body>

  <!-- Navigation -->
  <nav>
    <div class='container'>
      <object type='image/svg+xml' data='https://content.codecademy.com/courses/jquery/audit/images/sole-logo.svg'></object>
      <div>
        <span class='menu-button'>Menu</span>
        <span class='login-button'>Login</span>
      </div>
    </div>
  </nav>

  <!-- Nav Menu -->
  <div class='nav-menu hide'>
    <div class='container'>
      <ul>
        <li>Shoes</li>
        <li>Women's Shoes</li>
        <li>Men's Shoes</li>
        <li>Shoe Accessories</li>
        <li>Wholesale</li>
      </ul>
      <ul>
        <li>Contact</li>
        <li>Twitter</li>
        <li>Facebook</li>
        <li>Instagram</li>
        <li>Email</li>
      </ul>
    </div>
  </div>

  <!-- Login Form -->
  <div class='login-form'>
    <div class='container'>
      <form>
        <h4>Username</h4>
        <input class='username' />
        <h4>Password</h4>
        <input type='password' />
        <input class='sign-in-button' type='submit' value='Sign In' />
      </form>
    </div>
  </div>

  <!-- Product Cards -->
  <div class='container'>
    <div class='product-card'>
      <div class='product-photo sole-air-ii'></div>
      <div class='product-details'>
        <h4>Sole Air II</h4>
        <div>
          <p>$35</p>
          <div class='more-details-button'>
            <img src='https://content.codecademy.com/courses/jquery/audit/images/right-arrow.svg' />
          </div>
        </div>
      </div>

      <div class='shoe-details'>
        <p>The ultimate in style and comfort, the Sole Air II's are great for walking and casual wearing.</p>
        <div class='size-chart'>
          <h4>Size</h4>
          <ul class='sizes'>
            <li>8</li>
            <li>9</li>
            <li>10</li>
            <li>11</li>
            <li>12</li>
          </ul>
        </div>
        <div class='buy-now-button disabled'>
          <h3>Add to cart</h3>
        </div>
      </div>
    </div>
  </div>

  <div class='container'>
    <div class='product-card'>
      <div class='product-photo tidal-x'></div>
      <div class='product-details'>
        <h4>Tidal X</h4>
        <div>
          <p>$40</p>
          <div class='more-details-button'>
            <img src='https://content.codecademy.com/courses/jquery/audit/images/right-arrow.svg' />
          </div>
        </div>
      </div>

      <div class='shoe-details'>
        <p>The Tidal X's signature rubber midsole make this the perfect running shoe. With a soft mesh upper, and synthetic polymer outsole, these shoes really fly.</p>
        <div class='size-chart'>
          <h4>Size</h4>
          <ul class='sizes'>
            <li>6</li>
            <li>7</li>
            <li>10</li>
            <li>12</li>
            <li>13</li>
          </ul>
        </div>
        <div class='buy-now-button disabled'>
          <h3>Add to cart</h3>
        </div>
      </div>

    </div>
  </div>

  <div class='container'>
    <div class='product-card'>
      <div class='product-photo dark-sole-original'></div>
      <div class='product-details'>
        <h4>Dark Sole Original</h4>
        <div>
          <p>$60</p>
          <div class='more-details-button'>
            <img src='https://content.codecademy.com/courses/jquery/audit/images/right-arrow.svg' />
          </div>
        </div>
      </div>

      <div class='shoe-details'>
        <p>Light up the night with the Dark Sole Original. Lights around the midsole activate when stomped.</p>
        <div class='size-chart'>
          <h4>Size</h4>
          <ul class='sizes'>
            <li>9</li>
            <li>10</li>
            <li>10.5</li>
            <li>11</li>
          </ul>
        </div>
        <div class='buy-now-button disabled'>
          <h3>Add to cart</h3>
        </div>
      </div>
    </div>
  </div>

  <!-- Shopping cart -->
  <div class='shopping-cart'>
    <div class='container'>
      <div class='cart'>
        <object type='image/svg+xml' data='https://content.codecademy.com/courses/jquery/audit/images/shopping-cart.svg'></object>
        <h3 class='items-qty'>1</h3>
      </div>
      <h3>Checkout</h3>
    </div>
  </div>

  <footer>
    <div class='container'>
      <object type='image/svg+xml' data='https://content.codecademy.com/courses/jquery/audit/images/sole-logo.svg'></object>
      <div>Contact Us</div>
    </div>
  </footer>
  <script
    src="https://code.jquery.com/jquery-3.2.1.min.js"
    integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
    crossorigin="anonymous">
  </script>
  <script src='js/main.js'></script> 
</body>

</html>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* .ready()
----------
The jQuery library makes it quick and easy to add visual effects and interactivity to your web page. However, a web page must be rendered in a user’s browser before it’s possible to have 
any dynamic behavior. To solve this problem, we will use our first jQuery method.

The jQuery .ready() method waits until the HTML page’s DOM is ready to manipulate. You should wrap all JavaScript behavior inside of the .ready() method. This will make sure the web page 
is rendered in the browser before any jQuery code executes.

$(document).ready(() => {

});

In the example above, the .ready() method waits until the browser finishes rendering the HTML document before triggering a callback function. We will write all of our jQuery behavior 
inside this callback function.

* Instructions
--------------
Checkpoint 1 Passed
1.
In main.js add a callback function that executes when the DOM is finished rendering.


Hint
Paste the following code into the main.js file.

$(document).ready(() => {

});

main.js
-------
$(document).ready(() => {

});

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Targeting by Class
--------------------
Let’s look at the code we just pasted into our main.js file:

$(document).ready(() => {
    
});

In the example above, document is a special keyword that we use to target the HTML document and create a jQuery object.

We can use the same $() syntax to create jQuery objects for elements on a web page. Typically, we pass a string into $() to target elements by id, class, or tag. Once targeted, we can 
use . notation to attach a handler method that triggers a callback function.

Let’s consider how we can target elements by class. We can reference elements by class name with the following syntax:

$('.someClass').handlerMethod();

In the example above, every element with a class of 'someClass' is targeted. Note, we prepend the class name with a period (.someClass). Then, we call the .handlerMethod() on all of the 
referenced items.

Let’s give this a shot on our MOVE Gear site.

* Instructions
--------------
Checkpoint 1 Passed
1.
We have several thumbnail images with a class of 'product-photo', but they don’t appear in the site because their display property is set to none in style.css . Let’s start by using 
jQuery to target every '.product-photo'.


Hint
Inside of the .ready() callback, add code to target elements with the class product-photo.

The following code targets all elements with class item:

$('.item')

Checkpoint 2 Passed
2.
Now that we have targeted all '.product-photo's, let’s call the jQuery .show() method on them to make them appear.


Hint
The following code calls .show() on all elements with class item:

$('.item').show();

main.js
-------
$(document).ready(() => {
  $('.product-photo').show();
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Targeting by id
-----------------
While classes allow us to target multiple elements at once, we can also target single elements by id.

To select by id, we prepend the element’s id name with the # symbol.

$('#someId').hide();

In the example above, we target the #someId element and call the .hide() method on it. The .hide() method hides the someId element when the web page renders to a client’s browser.

Let’s target by id to hide the navigation menu in our MOVE Gear site.

* Instructions
--------------
Checkpoint 1 Passed
1.
Inside our .ready() callback function in the main.js file, use jQuery to select the #nav-dropdown element.


Hint
The following code targets the element with id main:

$('#main');

Checkpoint 2 Passed
2.
Call the .hide() method on the '#nav-dropdown' element.

main.js
-------
$(document).ready(() => {
  $("#nav-dropdown").hide();
});

------------------------------------------------------------------------------------------------------------------------------------------------------------------































































































































































































